-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generics-based implementations for common typeclasses
--   
--   Provides generics-based implementations for common typeclasses using
--   Generics. For now, has implementations for Numeric typeclasses (Num,
--   Fractional, and Floating) and Semigroup and Monoid.
--   
--   Please see the README on Github at
--   <a>https://github.com/mstksg/one-liner-instances#readme</a>
@package one-liner-instances
@version 0.1.0.0


-- | Derived methods for Semigroup and Monoid.
--   
--   Can be used for any types (deriving <a>Generic</a>) made with a single
--   constructor, where every field is an instance of <a>Semigroup</a> (or
--   <a>Monoid</a>, depending on the function).
--   
--   Also includes a newtype wrapper that imbues any such data type with
--   instant <a>Semigroup</a> and <a>Monoid</a> instances.
module Data.Monoid.OneLiner

-- | If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Semigroup</a>, then <tt><a>GMonoid</a> a</tt>
--   has a <a>Semigroup</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Monoid</a>, then <tt><a>GMonoid</a> a</tt> has
--   a <a>Monoid</a> instance.
newtype GMonoid a
GMonoid :: a -> GMonoid a
[getGMonoid] :: GMonoid a -> a

-- | Semigroup append (<a>&lt;&gt;</a>) implemented by calling
--   <a>&lt;&gt;</a> on the components.
gSemigroup :: forall a. (ADTRecord a, Constraints a Semigroup) => a -> a -> a

-- | Monoid append (<a>mappend</a>) implemented by calling <a>&lt;&gt;</a>
--   on the components.
gMappend :: forall a. (ADTRecord a, Constraints a Monoid) => a -> a -> a

-- | Monoid identity (<a>mempty</a>) implemented by using <a>mempty</a> for
--   all of the components.
gMempty :: forall a. (ADTRecord a, Constraints a Monoid) => a
instance Data.Traversable.Traversable Data.Monoid.OneLiner.GMonoid
instance Data.Foldable.Foldable Data.Monoid.OneLiner.GMonoid
instance GHC.Base.Functor Data.Monoid.OneLiner.GMonoid
instance GHC.Generics.Generic (Data.Monoid.OneLiner.GMonoid a)
instance Data.Data.Data a => Data.Data.Data (Data.Monoid.OneLiner.GMonoid a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Monoid.OneLiner.GMonoid a)
instance GHC.Show.Show a => GHC.Show.Show (Data.Monoid.OneLiner.GMonoid a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Monoid.OneLiner.GMonoid a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Monoid.OneLiner.GMonoid a)
instance (Generics.OneLiner.Internal.ADTRecord a, Generics.OneLiner.Internal.Constraints (Data.Monoid.OneLiner.GMonoid a) Data.Semigroup.Semigroup) => Data.Semigroup.Semigroup (Data.Monoid.OneLiner.GMonoid a)
instance (Generics.OneLiner.Internal.ADTRecord a, Generics.OneLiner.Internal.Constraints (Data.Monoid.OneLiner.GMonoid a) GHC.Base.Monoid) => GHC.Base.Monoid (Data.Monoid.OneLiner.GMonoid a)


-- | Derived methods for numeric typeclasses.
--   
--   Can be used for any types (deriving <a>Generic</a>) made with a single
--   constructor, where every field is an instance of <a>Num</a> (or
--   <a>Fractional</a> or <a>Floating</a>, depending on the function).
--   
--   Also includes a newtype wrapper that imbues any such data type with an
--   instant <a>Num</a> (and <a>Fractional</a> and <a>Floating</a>)
--   instance.
--   
--   See README for details on usage instructions and motivations.
module Numeric.OneLiner

-- | If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Num</a>, then <tt><a>GNum</a> a</tt> has a
--   <a>Num</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Fractional</a>, then <tt><a>GNum</a> a</tt>
--   has a <a>Fractional</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Floating</a>, then <tt><a>GNum</a> a</tt> has
--   a <a>Floating</a> instance.
newtype GNum a
GNum :: a -> GNum a
[getGNum] :: GNum a -> a
gPlus :: forall a. (ADTRecord a, Constraints a Num) => a -> a -> a
gMinus :: forall a. (ADTRecord a, Constraints a Num) => a -> a -> a
gTimes :: forall a. (ADTRecord a, Constraints a Num) => a -> a -> a
gNegate :: forall a. (ADTRecord a, Constraints a Num) => a -> a
gAbs :: forall a. (ADTRecord a, Constraints a Num) => a -> a
gSignum :: forall a. (ADTRecord a, Constraints a Num) => a -> a
gFromInteger :: forall a. (ADTRecord a, Constraints a Num) => Integer -> a
gDivide :: forall a. (ADTRecord a, Constraints a Fractional) => a -> a -> a
gRecip :: forall a. (ADTRecord a, Constraints a Fractional) => a -> a
gFromRational :: forall a. (ADTRecord a, Constraints a Fractional) => Rational -> a
gPi :: forall a. (ADTRecord a, Constraints a Floating) => a
gExp :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gLog :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gSqrt :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gPower :: forall a. (ADTRecord a, Constraints a Floating) => a -> a -> a
gLogBase :: forall a. (ADTRecord a, Constraints a Floating) => a -> a -> a
gSin :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gCos :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gTan :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAsin :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAcos :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAtan :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gSinh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gCosh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gTanh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAsinh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAcosh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
gAtanh :: forall a. (ADTRecord a, Constraints a Floating) => a -> a
instance Data.Traversable.Traversable Numeric.OneLiner.GNum
instance Data.Foldable.Foldable Numeric.OneLiner.GNum
instance GHC.Base.Functor Numeric.OneLiner.GNum
instance GHC.Generics.Generic (Numeric.OneLiner.GNum a)
instance Data.Data.Data a => Data.Data.Data (Numeric.OneLiner.GNum a)
instance GHC.Read.Read a => GHC.Read.Read (Numeric.OneLiner.GNum a)
instance GHC.Show.Show a => GHC.Show.Show (Numeric.OneLiner.GNum a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Numeric.OneLiner.GNum a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Numeric.OneLiner.GNum a)
instance (Generics.OneLiner.Internal.ADTRecord a, Generics.OneLiner.Internal.Constraints (Numeric.OneLiner.GNum a) GHC.Num.Num) => GHC.Num.Num (Numeric.OneLiner.GNum a)
instance (Generics.OneLiner.Internal.ADTRecord a, Generics.OneLiner.Internal.Constraints (Numeric.OneLiner.GNum a) GHC.Real.Fractional) => GHC.Real.Fractional (Numeric.OneLiner.GNum a)
instance (Generics.OneLiner.Internal.ADTRecord a, Generics.OneLiner.Internal.Constraints (Numeric.OneLiner.GNum a) GHC.Float.Floating) => GHC.Float.Floating (Numeric.OneLiner.GNum a)
